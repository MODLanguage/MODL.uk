<h1 id="title">Specification</h1>
<div id="intro-and-toc" class="row">
  <div id="toc" class="col-4" style="background-color:#eee;float:right;">"
  </div>
  <div class="col-8">
    <div class="sectionh2 toc-content toc-content1 intro" id="introduction" style="border-top:0px;">
      <h2 id="introduction-title">Introduction</h2>
      <p>
        Existing plain text data serialisation formats are too verbose to store meaningful objects on storage media with very limited data capacity, e.g. QR codes, NFC tags and DNS TXT records. For these storage media, character efficiency is crucial:
      </p>
      <ul>
        <li>Storing more data in QR codes makes them more prone to error.</li>
        <li>NFC tags with more data capacity come at a much higher cost.</li>
        <li>Larger DNS packets require TCP transport and increase latency.</li>
      </ul>
      <p>
        Often, developers are forced to roll-their-own bespoke methods of packing and unpacking data. This presents a significant barrier to entry for those looking to make use of these storage media. MODL addresses this – offering a compact data serialisation format that's easy to use and easy to customise for any use case.
      </p>
      <div class="sectionh3" id="status">
        <h3 id="status-title">Status</h3>
        <p>
          MODL was first published on 25th March 2018. We are currently seeking feedback from the technical community. We do not anticipate major changes to the grammar or interpreter rules.
        </p>
      </div>
      <div class="sectionh3" id="objectives">
        <h3 id="objectives-title">Objectives</h3>
        <p>
          MODL should be, in order of priority:
        </p>
        <ol>
          <li>The most character efficient way to describe an object when minified.</li>
          <li>Unambiguous with no edge case surprises.</li>
          <li>Human-friendly to write and read when unpacked.</li>
          <li>Easy to parse into data structures in all modern programming languages.</li>
        </ol>
        <div class="sectionh3" id="rules">
          <h3 id="rules-title">Rules</h3>
          <ol>
            <li>MODL is case-sensitive</li>
            <li>Whitespace means tab (0x09) or space (0x20).</li>
            <li>Newline means LF (0x0A) or CRLF (0x0D0A).</li>
            <li>MODL ignores all leading and trailing whitespace.</li>
            <li>MODL files must be valid UTF-8 encoded Unicode documents.</li>
          </ol>
        </div>
      </div>
      <div class="sectionh3" id="links">
        <h3 id="links-title">Links in This Document</h3>
        <p>
          For the benefit of readers, these icons are displayed next to links to indicate where the link leads:
        </p>
        <div id="link-icons-wrapper">
          <div style="display:inline-block;width:100%;">
            <div class="icon-explain"><%=link_icon("up")%> Up the page</div>
            <div class="icon-explain"><%=link_icon("internal")%> Another page</div>
          </div>
          <div style="display:inline-block;width:100%;">
            <div class="icon-explain"><%=link_icon("down")%> Down the page</div>
            <div class="icon-explain"><%=link_icon("external")%> Another site (new&nbsp;window)</div>
          </div>
        </div>
      </div>
      <div class="sectionh3" id="terminology">
        <h3 id="terminology-title">Conventions in This Document</h3>
        <p>
          The key words "must", "must not", "required", "shall", "shall not", "should", "should not", "recommended", "may", and "optional" are to be interpreted as described in <a href="https://www.ietf.org/rfc/rfc2119.txt" target="_blank">RFC2119</a> <%=link_icon("external")%>.
        </p>
      </div>
      <div class="sectionh3" id="author">
        <h3 id="author-title">Author</h3>
        <p>
          MODL was created by <a href="http://www.github.com/elliottinvent" target="_blank">Elliott Brown</a> <%=link_icon("external")%> with the help of <a href="http://www.github.com/alexdalitz" target="_blank">Alex Dalitz</a> <%=link_icon("external")%>.
        </p>
      </div>
    </div>
  </div>
</div>
<div class="toc-content toc-content2">
  <div class="sectionh2" id="data-types">
    <h2 id="data-types-title">Data Types</h2>
    <p>
      MODL can represent four structural types: 
    </p>
    <ul>
      <li><a href="#map">map</a> <%=link_icon("down")%></li>
      <li><a href="#pair">pair</a> <%=link_icon("down")%></li>
      <li><a href="#array">array</a> <%=link_icon("down")%></li>
      <li><a href="#conditional">conditional</a> <%=link_icon("down")%></li>
    </ul>
    <p>
      and four primitive types:
    </p>
    <ul>
      <li><a href="#number">number</a> <%=link_icon("down")%></li>
      <li><a href="#string">string</a> <%=link_icon("down")%></li>
      <li><a href="#booleans">booleans</a> <%=link_icon("down")%></li>
      <li><a href="#null">null</a> <%=link_icon("down")%></li> 
    </ul>
    <div class="sectionh3" id="machine-diagrams">
    <h3 id="machine-diagrams-title">Machine Diagrams</h3>
      <p>
        MODL can be explained using machine diagrams (in the same style as <a href="http://www.json.org" target="_blank">JSON</a> <%=link_icon("external")%>):
      </p>
      <img src="images/machine-diagrams-big.png" id="machine-diagrams-image" alt="MODL machine diagrams">
    </div>
    <div class="sectionh3" id="structures">
    <h3 id="structures-title">Structures</h3>
      <p>
        The four structures that make up MODL are: map, array, pair and conditional.
      </p>
      <div class="sectionh4" id="map">
        <h4 id="map-title">Map</h4>
          <p>
            A map is known in other languages as a hash table, object, record, struct, dictionary, keyed list, or associative array. A map begins with left bracket <code>(</code> and ends with right bracket <code>)</code>, it contains zero or more pairs separated by new line or semi-colon:
          </p>
          <%=code_with_note('code-example-map','
            (
              make = Bentley
              model = Continental GT
            )

            <span>## or, more character efficient:</span>
            <span>##(make=Bentley;model=Continental GT)</span>',

          'An example map.')
          %>
          <script>            
          function toPlayground(){
            alert("here");
          }
          </script>
      </div>
      <div class="sectionh4" id="array">
      <h4 id="array-title">Array</h4>
        <p>
          Arrays in MODL will be familiar to most – beginning with a left square bracket <code>[</code> and ending with a right square bracket <code>]</code>. Items are separated by a new line or semi-colon. Array items can be of any data type.
        </p>
        <%=code_with_note('code-example-array','
          [
            fastback
            convertible
          ]

          <span>## or, more character efficient:</span>
          <span>##[fastback;convertible]</span>',

        'An example array.')
        %>        
      </div>
      <div class="sectionh4" id="pair">
      <h4 id="pair-title">Pair</h4>
        <p>
          Pairs are the primary building block of MODL objects, they can be used in a number of ways to increase character efficiency. Orphan pairs (not within a map) are allowed for character efficiency.
        </p>
        <h5 id="standard-pair">Standard Pair</h5>
        <p>
          The key is to the left of the equals sign and the value to the right:
        </p>
        <%=code_with_note('code-example-pair1','
          make = Bentley

          <span>## or, more character efficient:</span>
          <span>## make=Bentley</span>',

        'An example pair.')
        %>
        <h5 id="map-pair">Map Pair</h5>
        <p>
          When assigning a map to a key, we can omit <code>=</code> since the left bracket separates the key from the map contents:
        </p>
        <%=code_with_note('code-map-pair','
          car(
            make = Bentley
            model = Continental GT
          )

          <span>## or, more character efficient:</span>
          <span>## car(make=Bentley;model=Continental GT)</span>',

        'An example map pair.')
        %>
        <p>
          This is simply a (1 character) more efficient way to represent the more conventional (and valid):
        </p>
        <%=code_with_note('code-map-pair-bigger','
          car=(
            make=Bentley
            model=Continental GT
          )',

        'A map assigned to a key in a pair.')
        %>        
        <h5 id="array-pair">Array Pair</h5>
        <p>
          When assigning an array to a key, we can omit <code>=</code> since the left square bracket separates the key from the array contents:
        </p>
        <%=code_with_note('code-array-pair','
            style[
              fastback
              convertible
            ]

            <span>## or, more character efficient:</span>
            <span>## style[fastback;convertible]</span>',

        'An example array pair.')
        %>        
        <p>
          This is simply a shorter way to represent the more conventional (and valid):
        </p>
        <%=code_with_note('code-map-pair2','
          style=[
            fastback
            convertible
          ]',

        'An array assigned to a key in a pair.')
        %>  
        <h5 id="multi-value-pair">Multi-value Pair</h5>
        <p>
          A multi-value pair is a way to make map declaration more character efficient. Take this example map pair with the key <code>car</code>:
        </p>
        <%=code_with_note('code-mv-pair','
          car(make=Bentley;model=Continental GT)',
        
        'An example map pair containing two pairs – using 38 characters.')
        %>
        <p>
          If cars are described regularly and always include a <code>make</code> and <code>model</code> pair in that order, we can assign the keys automatically using a MODL class and just provide the values as a multi-value pair, this is a multi-value pair:
        </p>
        <%=code_with_note('code-mv-pair2','
          car=Bentley:Continental GT',

        'An example multi-value pair – using 26 characters.')
        %>
        <p>
          There's information about how to define classes in the <a href="#classes">classes section</a>.<%=link_icon("down")%>
        </p>
        <p>
          When multi-value pairs are nested, inner multi-value pairs must be enclosed in brackets.
        </p>
        <%=code_with_note('code-mv-pair3','
          car=Bentley:Continental GT:(nested_value1:nested_value2)',
        'Example nested multi-value pairs.')
        %>
        <h5 id="valid-keys">Valid Keys</h5>
        <p>
          Pair keys must be a string: they may contain numbers, may start with a number but must not be made up of solely numbers. Pairs cannot be given the key  <em>true</em>, <em>false</em> or <em>null</em>. All unreserved characters are valid in a key.
        </p>
      </div>
      <div class="sectionh4" id="conditionals-brief">
        <h4 id="conditionals-brief-title">Conditionals</h4>
        <p>
          Conditions are explained in <a href="#conditionals">detail later</a> <%=link_icon("down")%>. In the meantime, here is a simple conditional with logic based on the value of the <a href="#hidden-objects">hidden object</a> <%=link_icon("down")%> <code>country</code>:
        </p>
          <%=code_with_note('code-simple-conditional','
            _country = gb
            <span>## The value of the "support_contact" key is set to a conditional value:</span>
            support_contact = {
              <span>## Does the data in the key "country" equal "gb"?</span>
              %_country=gb?
                <span>## Yes, assign the value "Joe Bloggs" to the key "support_contact"</span>
                Joe Bloggs
              <span>## If not, does it equal "us"?</span>
              /_%country=us?
                <span>## Yes, assign the value "John Doe" to the key "support_contact"</span>
                John Doe
              /?
              <span>## If not, assign the value "none"?</span>
                None
            }

            <span>## or, more character efficient:</span>
            <span>## _country=gb;support_contact={country=gb?John Smith/country=us?John Doe/?None}</span>',

          'An example conditional.')
          %>     
        <p>
          If including logic within data serialisation seems like madness, it's <a href="#conditional-rationale">explained here</a>. <%=link_icon("down")%>
        </p>
      </div>
    </div>
    <div class="sectionh3" id="primitives">
    <h3 id="primitives-title">Primitives</h3>
      <p>
        The four primitives in MODL are: number, string, boolean and null.
      </p>
      <div class="sectionh4" id="number">
        <h4 id="number-title">Number</h4>
        <p>
          Numbers in MODL are the same as numbers in JSON (<a href="https://tools.ietf.org/html/rfc7159#section-6" target="_blank">view RFC</a> <%=link_icon("external")%>).
        </p>
      </div>
      <div class="sectionh4" id="string">
        <h4 id="string-title">String</h4>
        <p>
          Strings in MODL are the same as strings in JSON (<a href="https://tools.ietf.org/html/rfc7159#section-7" target="_blank">view RFC</a> <%=link_icon("external")%>).
        </p>
      </div>
      <div class="sectionh4" id="booleans">
        <h4 id="booleans-title">Booleans</h4>
        <p>
          Boolean values are represented in two ways – a conventional way and a deliberately unconventional way that is both character efficient and unambiguous.
        </p>
        <h5 id="true">True</h5>
        <p>
          True is represented as <code>true</code>, <code>TRUE</code> or <code>01</code>. Since <code>01</code> is an invalid number and unlikely to be required as a string, it is the most character efficient way to represent <code>true</code> unambiguously.
        </p>
        <%=code_with_note('code-true-example','
          conventional_true = true
          <span>## or, more character efficient:</span>
          <span>## unconventional_true=01</span>',

        'An example true boolean value.')
        %>
        <h5 id="false">False</h5>
        <p>
          False is represented as <code>false</code>, <code>FALSE</code> or <code>00</code>. Since <code>00</code> is an invalid number and unlikely to be required as a string it is the most character efficient way to represent <code>false</code> unambiguously.
        </p>
        <%=code_with_note('code-false-example','
          conventional_false = false
          <span>## or, more character efficient:</span>
          <span>## unconventional_false=00</span>',

        'An example false boolean value.')
        %>
      </div>
      <div class="sectionh4" id="null">      
        <h4 id="null-title">Null</h4>
        <p>
          Null is represented as <code>null</code>, <code>NULL</code> or <code>000</code>. Like true and false, <code>000</code> is an invalid number and unlikely to be required as a string so alongside true and false it is the most character efficient way to represent null unambiguously.
        </p>
        <%=code_with_note('code-null-example','
          conventional_null = null
          <span>## or, more character efficient:</span>
          <span>## unconventional_null=000</span>',

        'An example null value.')
        %>
      </div>
    </div>
    <div class="sectionh3" id="literals">
      <h3 id="literals-title">Literals</h3>
      <p>
        Values enclosed in quotation marks <code>"</code> are literals, all <a href="#reserved-characters">reserved characters</a> <%=link_icon("down")%> can be used inside literals except for the quotation mark <code>"</code> which must be escaped with backslash <code>\</code> or tilde <code>~</code>. 
      </p>
    </div>
    <div class="sectionh3" id="type-inference">
      <h3 id="type-inference-title">Type Inference</h3>
      <p>
        MODL uses type inference to detect the data type of a value. Numbers can be forced as strings by enclosing the value in quotation marks <code>"</code> (a literal value).
      </p>
    </div>        
  </div>
  <div class="sectionh2" id="comments">
  <h2 id="comments-title">Comments</h2>
    <p>
      Two hash symbols mark the rest of the line as a comment.
    </p>
    <%=code_with_note('code-comment-example','
      <span>## This comment is allowed</span>
      car(
        <span>## So is this one</span>
        make=Bentley <span>## This one too</span>
        model=Continental GT
        styles[
          <span>## Inside arrays is fine too</span>
          fastback
          convertible <span>## Even at the end of lines</span>
        ]
        price={
          <span>## And inside conditionals</span>
          c=gb? <span>## At the end of tests</span>
            154400
          /?
            <span>## And inside return values</span>
            210000
        }
      )',

      'A simple MODL object showing a variety of ways to make comments.')
      %>
    <p>
      Comments run to the end of the line so they can not be used in fully minified MODL – this is by design. Comments do not appear in output objects.
    </p>      
  </div>
  <div class="sectionh2" id="object-referencing">
  <h2 id="object-referencing-title">Object Referencing</h2>
    <p>
      MODL can reference any object previously described in the same file, an object can be described once and used multiple times. Objects are referenced using percent-prefixing. For character efficiency it's possible to omit the <code>_</code> when referencing hidden objects, as shown in the second example below:
    </p>
      <%=code_with_note('code-setvars','
        <span class="syntax-highlighter">_manufacturer=Bentley</span>

        car(
          make=<span class="syntax-highlighter">%_manufacturer</span>
          model=Continental
        )
        car(
          make=<span class="syntax-highlighter">%manufacturer</span>
          model=Bentayga
        )',

      'An example using object referencing.')
      %>
      <p>
        Percent prefixing is character efficient because it has no terminator. In circumstances where the variable needs to be interpolated without spacing, the variable (and any methods) can be enclosed in grave accents <code>`</code>. Take the following example:
      </p>
      <%=code_with_note('code-setvars2','
        test=foo

        <span>## Set value 1 to use the value of the variable "test"</span>
        value1=%test
        <span>## Set value 2 to use the value of the variable "test" appended with "bar"</span>
        value2=<span class="syntax-highlighter">`%test`</span>bar',

      'An example using object referencing surrounded in graves.')
      %>
    <div class="sectionh3" id="object-index">
      <h3 id="object-index-title">Object Index</h3>
      <p>
        An object index is set using the key <code>?</code>. Values must be provided in a pair, a <a href="#multi-value-pair">multi-value pair</a> <%=link_icon("up")%> or an array and can be referenced using their position in the index. This serves as a character efficient way to reference an object. For example:
      </p>
      <%=code_with_note('object-index-example','
        <span>## We create an object index using a multi-value pair, assigning "foo" to index 0 and "bar" to index 1:</span>
        ?=foo:bar

        <span>## We can reference the values using the index</span>
        test=%0 <span>## We\'ve assigned "foo" to the key "test"</span>
        test2=%1 <span>## We\'ve assigned "bar" to the key "test2"</span>',

      'An example using the character efficient object index.')
      %>      
    </div>      
    <div class="sectionh3" id="methods">
      <h3 id="methods-title">Methods</h3>
      <p>
        Methods can be applied to objects. This can be useful in circumstances where a string is used multiple times but with varying case or spacing. Take the following example:
      </p>
      <%=code_with_note('code-casemodification1','
        (
          name = TESTING
          description = This is an object testing variables
          value1 = Testing123
        )',

        'An object with a word repeated multiple times in different case.')
      %>
      <p>
        We can describe this object more efficiently using built-in MODL methods – <code>u</code> (upcase), <code>d</code> (downcase) and <code>s</code> (sentence). Here's the same object using methods to reduce the size of the object:
      </p>
      <%=code_with_note('code-casemodification2','
        <span class="syntax-highlighter">_v=testing</span>
        (
          name = <span class="syntax-highlighter">%v.u</span>
          description = This is an object <span class="syntax-highlighter">%v</span> variables
          value = <span class="syntax-highlighter">`%v.s`</span>123
        )',

        'An object using methods to change variable case.')
      %>        
      <p>
        The following methods are available, where <code>x</code> is an object previously described:
      </p>
      <%
      var1 = "Here's a REF test"
      %>
      <table class="fields">
        <thead>
          <tr>
            <th style="width:40px">Method&nbsp;ID</th>
            <th style="width:140px">Method&nbsp;Name</th>
            <th style="width:60px">Example</th>
            <th class="nm">Variable&nbsp;Transformation</th>
          </tr>
        </thead>
        <tr>
          <td class="id-header">u</td>
          <td>upcase</td>
          <td>%x.u</td>
          <td class="nm">
            <code><%=var1%></code> => <code><%=var1.upcase%></code>
          </td>
        </tr>
        <tr>
          <td class="id-header">d</td>
          <td>downcase</td>
          <td>%x.d</td>
          <td class="nm">
            <code><%=var1%></code> => <code><%=var1.downcase%></code>
          </td>
        </tr>
        <tr>
          <td class="id-header">s</td>
          <td>sentence</td>
          <td>%x.s</td>
          <td class="nm">
            <code><%=var1%></code> => <code><%=var1.capitalize%></code>
          </td>
        </tr>
        <tr>
          <td class="id-header">i</td>
          <td>initcap</td>
          <td>%x.i</td>
          <td class="nm">
            <code><%=var1%></code> => <code><%=var1.split.map(&:capitalize).join(' ')%></code>
          </td>
        </tr>
        <tr>
          <td class="id-header">e</td>
          <td><a href="https://en.wikipedia.org/wiki/Percent-encoding" target="_blank">urlencode</a> <%=link_icon("external")%></td>
          <td>%1.e</td>
          <td class="nm">
            <code><%=var1%></code> => <code><%=CGI.escape(var1)%></code>
          </td>
        </tr>
        <tr>
          <td class="id-header">r<span style="font-weight:normal;">(<em>this</em>,<em>that</em>)</span></td>
          <td>replace</td>
          <td>`%x.r(test,foo)`</td>
          <td class="nm">
            <code><%=var1%></code> => <code><%=var1.gsub("test","foo")%></code>
          </td>
        </tr>
        <tr>
          <td class="id-header">t<span style="font-weight:normal;">(<em>this</em>)</span></td>
          <td>trim</td>
          <td>`%x.t(REF)`</td>
          <td class="nm">
            <code><%=var1%></code> => <code>Here's a&nbsp;</code>
          </td>
        </tr>
      </table>
      <p>
        Methods that take arguments (<code>replace</code> and <code>trim</code>) must be called with graves, e.g. <code>`%string.replace(this,that)`</code>. To replace with an empty string, use an empty graved string: <code>`%string.replace(foo,``)`</code>.
      </p>
      <p>
        Methods can be chained, e.g. <code>`%string.replace(this,that).upcase`</code> and it's also possible to define <a href="#custom-methods">custom methods</a>. <%=link_icon("down")%>
      </p>
    </div>
    <div class="sectionh3" id="scope">
      <h3 id="scope-title">Scope</h3>
      <p>
        All objects described in MODL are global, they can be referenced anywhere else in the file.
      </p>
    </div>    
  </div>
  <div class="sectionh2" id="conditionals">
  <h2 id="conditionals-title">Conditionals</h2>
    <p>
      Standard data serialisation formats contain no logic, MODL is different - allowing object authors to design logic into their object description. This means that the same object can be described differently to recipients based on client side variables. All of this is dealt with at the interpretation layer, resulting in much less work for the developer receiving the object and most importantly, consistent logic processing.
    </p>
    <p>
      A conditional can output any primitive or structure, including a conditional. A conditional begins with the left brace <code>{</code> and ends with the right brace <code>}</code>.
    </p>
    <div class="sectionh3" id="conditionals-example">
      <h3 id="conditionals-example-title">Example</h3>
      <p>
        Conditionals are made up of a test (e.g. <code>country=us</code>) and it's return value (e.g. <code>John Doe</code>) separated by a question mark <code>?</code>. Each condition is separated by a slash <code>/</code>. In this example a variable called <code>country</code> is tested:
      </p>
      <%=code_with_note('code-conditional2','
        country = gb
        <span>## The value of the "support_contact" key is set to a conditional value:</span>
        support_contact = {
          <span>## Does the data in the key "country" equal "gb"?</span>
          %_country=gb?
            <span>## Yes, assign the value "Joe Bloggs" to the key "support_contact"</span>
            Joe Bloggs
          <span>## If not, does it equal "us"?</span>
          /%_country=us?
            <span>## Yes, assign the value "John Doe" to the key "support_contact"</span>
            John Doe
          /?
          <span>## If not, assign the value "none"?</span>
            None
        }

        <span>## or, more character efficient:</span>
        <span>## country=gb;support_contact={country=gb?John Smith/country=us?John Doe/?None}</span>',

      'An example conditional.')
      %>
      <p>
        As you can see from the character efficient version above, it's possible to omit <code>%</code> when using an object reference as a variable, it's also possible to omit <code>_</code> from hidden objects. After interpretation, our MODL object looks like this:
      </p>
      <%=code_with_note('code-conditional-output','
        country = gb
        support_contact = Joe Bloggs',

      'The object after interpretation')
      %>       
    </div>
    <div class="sectionh3" id="conditional-rationale">
      <h3 id="conditional-rationale-title">Rationale</h3>
      <p>
        From a data serialisation perspective, at first glance the conditional example may seem like utter madness because we're checking a value that we defined ourselves. However, consider a case where <code>country</code> is prepended to the MODL string by a client and the rest of the MODL string is retrieved from elsewhere – e.g. a QR code, NFC tag or DNS TXT record.
      </p>
    </div> 
    <div class="sectionh3" id="conditional-parts">
    <h3 id="conditional-parts-title">Parts</h3>
    <p>
      Conditionals are made up of a test <code>(e.g. country=us)</code> and it's return value (e.g. <code>United States</code>) separated by a question mark <code>?</code>. Each condition is separated by a forward slash <code>/</code>. In our <a href="#conditionals-example">previous example</a> <%=link_icon("up")%> a user variable called country is used (note: user variables are set by the client): 
    </p>
    <div class="sectionh4" id="conditional-tests">
      <h4 id="conditional-tests-title">Conditional Tests</h4>
      <p>
         Conditional tests are made up of a variable and a value separated by an operator. Variables can be any values but are typically object references,
      </p>
      <p>
        Tests can use a range of operators. 
      </p>
      <h5 id="operators">Operators</h5>
      <p>
        Example user variables have been used to help demonstrate operators in the table below. The user variables are: language&nbsp;(<code>l</code>), latitude (<code>gy</code>), country (<code>c</code>) and operating system (<code>os</code>). Please note, these are not MODL variables, they must be populated by a client. The table below shows the full list of operators:
      </p>
      <table class="fields">
        <thead>
          <tr>
            <th style="width:40px">Operator</th>
            <th style="width:165px">Description</th>
            <th>Example</th>
            <th class="nm">Users that match condition</th>
          </tr>
        </thead>
        <tr>
          <td class="id-header">=</td>
          <td>Equals</td>
          <td><code>l=en?</code></td>
          <td class="nm">Users with language set to English</td>
        </tr>
        <tr>
          <td class="id-header">&gt;</td>
          <td>Greater than</td>
          <td><code>gy&gt;0?</code></td>
          <td class="nm">Users located in the northern hemisphere.</td>
        </tr>
        <tr>
          <td class="id-header">&gt;=</td>
          <td>Greater than or equal to</td>
          <td><code>gy&gt;=0?</code></td>
          <td class="nm">Users located on the equator or in the northern hemisphere.</td>
        </tr>
        <tr>
          <td class="id-header">&lt;</td>
          <td>Less than</td>
          <td><code>gy&lt;0?</code></td>
          <td class="nm">Users located in the southern hemisphere.</td>
        </tr>
        <tr>
          <td class="id-header">&lt;=</td>
          <td>Less than or equal to</td>
          <td><code>gy&lt;=0?</code></td>
          <td class="nm">Users located on the equator or in the southern hemisphere.</td>
        </tr>
        <tr>
          <td class="id-header">&amp;</td>
          <td>AND</td>
          <td><code>c=be&amp;l=fr?</code></td>
          <td class="nm">Users located in Belgium with language set to French.</td>
        </tr>
        <tr>
          <td class="id-header">|</td>
          <td>OR</td>
          <td><code>c=de|l=de?</code></td>
          <td class="nm">Users located in Germany or with language set to German.</td>
        </tr>
        <tr>
          <td class="id-header">!</td>
          <td>NOT</td>
          <td><code>!c=de|at?</code></td>
          <td class="nm">Users not located in Germany or Austria.</td>
        </tr>
        <tr>
          <td class="id-header">!=</td>
          <td>NOT equal to</td>
          <td><code>l!=en?</code></td>
          <td class="nm">Users with language not set to English.</td>
        </tr>
        <tr>
          <td class="id-header">*</td>
          <td>Wildcard</td>
          <td><code>os=*iOS*?</code></td>
          <td class="nm">Users using any iOS device.</td>
        </tr>
      </table>
      <h5 id="operator-precedence">Operator Precedence</h5>
        <p>
          This table shows operator precedence from highest to lowest:
        </p>
        <table class="fields">
          <thead>
            <tr>
              <th style="width:40px">Operator</th>
              <th>Description</th>
            </tr>
          </thead>
          <tr>
            <td style="width:40px" class="id-header">!</td>
            <td>NOT</td>
          </tr>
          <tr>
            <td class="id-header">&lt;=&nbsp;&nbsp;&lt;&nbsp;&nbsp;&gt;&nbsp;&nbsp;&gt;=</td>
            <td>Comparison operators</td>
          </tr>
          <tr>
            <td class="id-header">!=</td>
            <td>Not equal to</td>
          </tr>
          <tr>
            <td class="id-header">&amp;</td>
            <td>AND</td>
          </tr>
          <tr>
            <td class="id-header">|</td>
            <td>OR</td>
          </tr>
          <tr>
            <td class="id-header">*</td>
            <td>Wildcard</td>
          </tr>
        </table>
        <h5 id="variable-assumption">Variable Assumption</h5>
        <p>
          Sometimes you may need to check if a variable is one of a selection of possible values. If you wanted to check if the user country was US, GB of AU using the OR operator <code>|</code> you could do it like this:
        </p>
        <%=code_with_note('code-variable-assumption1','
          {
            <span class="syntax-highlighter">country = us | country = gb | country = au</span>?
              support_number=+441270123456
            /?
              support_number=+14161234567
          }',

        'A conditional checking a variable multiple times')
        %>
        <p>
          Or to be more character efficient you can use variable assumption, like this:
        </p>
        <%=code_with_note('code-variable-assumption2','
          {
            <span class="syntax-highlighter">country=us|gb|au</span>?
              support_number=+441270123456
            /?
              support_number=International Clients:+14161234567
          }',

          'Variable assumption')
        %>
        <h5 id="grouping-test-parts">Grouping Test Parts</h5>
        <p>
          Tests can be made up of multiple parts, these parts can be grouped by enclosing them in braces – <code>{</code> and <code>}</code>.
        </p>
        <%=code_with_note('code-grouping-test-parts','
          {
            <span class="syntax-highlighter">{</span> country = ca & language = fr <span class="syntax-highlighter">}</span> | country = fr?
              support_number=+14161234567
            /?
              support_number=+441270123456
          }

          <span>## or, more character efficient:</span>
          <span>## {<span class="syntax-highlighter">{</span>country=ca&language=fr<span class="syntax-highlighter">}</span>/country=fr?company=Example SARL;telephone=Service Clients:14161234567/?company=Example Ltd;telephone=Customer Service:441270123456}</span>',

        'An example conditional with grouped tests')
        %>
      </div>
      <div class="sectionh4" id="conditional-returns">
        <h4 id="conditional-returns-title">Conditional Returns</h4>
        <p>
          A conditional return must be valid for the context that it's returned in. For example, a conditional used to assign a value to a key must have an <code>else</code> clause (represented by <code>/?</code>) to be valid. A conditional at the top level of a map (not assigned to a pair key) must return either a pair or nothing.
        </p>
      </div>
    </div>
  </div>
  <div class="sectionh2" id="instructions">
  <h2 id="instructions-title">Instructions</h2>
    <p>
      Instructions can be passed to the MODL interpreter by using certain keys. For example, earlier we looked at the <a href="#object-index">object index</a> <%=link_icon("up")%> instruction using the key <code>?</code> – this instructs the interpreter to build an index from the values passed to it, which can be referenced by number.
    </p>
    <div class="sectionh3" id="hidden-objects">
      <h3 id="hidden-objects-title">Hidden Objects</h3>
      <p>
        Use an underscore-prefixed key to tell the MODL interpreter that this object should not be included in the output object. Underscore prefixed keys are typically used for objects that will be <a href="#object-referencing">referenced later</a> <%=link_icon("down")%>.
      </p>
    </div>
    <div class="sectionh3" id="mutable-immutable-values">
    <h3 id="mutable-immutable-values-title">Mutable / Immutable Values</h3>
      <p>
        Assign a value to an uppercase key to tell the interpreter that this object can only be described once.
        </p>
        <%=code_with_note('code-mutable-example','
          <span>## This mutable value with a lower (or mixed) case key can be changed:</span>
          mutable_key = 1
          <span>## This immutable value with an uppercase key can only be set once:</span>
          IMMUTABLE_KEY = 1

          <span>## No problem:</span>
          mutable_key = 2
          <span>## Results in ERROR:</span>
          IMMUTABLE_KEY = 2',

          'An example of mutable and immutable values.')
        %>
    </div>    
    <div class="sectionh3" id="interpreter-instructions">
      <h3 id="interpreter-instructions-title">Interpreter Instructions</h3>
      <p>
        An interpreter instruction is set using an asterisk-prefixed key, they never appear in the output object.
      </p>
      <div class="sectionh4" id="import">
        <h4 id="import-title">Import</h4>
        <p>
          Other MODL files can be imported by assigning a MODL file URI to the <code>*import</code> or <code>*i</code> key. The value can be a local or remote file location with a <code>.modl</code> or <code>.txt</code> extension. The interpreter will add a <code>.modl</code> extension if one is not specified. 
        </p>
        <p>
          Multiple files can be imported at the same point by providing the file URIs in an array, or at multiple different points in the file by using the instruction at multiple points. Imports can also be chained. This example shows one file being imported:
        </p>
        <%=code_with_note('code-import-example','
          <span class="syntax-highlighter">*import = example-classes.modl</span>
          example(
            value1 = one
            value2 = two
          )

          <span>## or, more character efficient:</span>
          <span><span class="syntax-highlighter">*import=example-classes.modl</span>;example(value1=one;value2=two)</span>',
          'An example file importing another MODL file called example-classes.modl.',nil,true,false)
        %>
        <p>
          In the following example, the <code>*IMPORT</code> / <code>*I</code> key is uppercase and therefore is <a href="#mutable-immutable-values">immutable</a> <%=link_icon("up")%> – indicating that only one import is allowed and the file being imported cannot include any further imports:
        </p>
        <%=code_with_note('code-import-example','
          <span class="syntax-highlighter">*IMPORT = example-classes.modl</span>
          example(
            value1 = one
            value2 = two
          )

          <span>## or, more character efficient:</span>
          <span><span class="syntax-highlighter">*I=example-classes.modl</span>;example(value1=one;value2=two)</span>',
          'An example file importing another MODL file called example-classes.modl.',nil,true,false)
        %>
        <p>
          It's also possible to use <a href="#object-referencing">object references</a> in URIs, like this:
        </p>
        <%=code_with_note('code-import-example','
          <span class="syntax-highlighter">_country=gb
          *IMPORT = example-classes-%country.modl</span>
          example(
            value1 = one
            value2 = two
          )',
          'An example file importing another MODL file called example-classes-gb.modl.',nil,true,false)
        %>
        <h5>File caching</h5>
        <p>
          It's recommended that interpreters cache imported files for one hour by default. To force an interpreter to fetch and parse the file each time the MODL is interpreted, add an exclamation mark (<code>!</code>) to the end of the URI.
        </p>
      </div>
      <div class="sectionh4" id="class">
        <h4 id="class-title">Class</h4>
        <p>
          Classes can be created using the key <code>*class</code> or <code>*c</code>. Classes are used in object transformation and are covered in detail in the <a href="#classes">classes</a> <%=link_icon("down")%> section.
        </p>
      </div>
      <div class="sectionh4" id="custom-methods">
        <h4 id="custom-methods-title">Method</h4>
        <p>
          Custom methods can be created using the key <code>*m</code> or <code>*method</code> and can be called by method name or ID. The method name is set using the key <code>*name</code> or <code>*n</code>, the method ID is set using the key <code>*id</code> or <code>*i</code>. Custom methods can only be composed using core methods with the <code>*transform</code> or <code>*t</code> key.
        </p>
        <p>
          For example, this method could be created to hyphenate a name:
        </p>
        <%=code_with_note('code-custom-method-example',"
          *method(
            <span>## The method can be called by it\'s ID or name</span>
            *id=hy
            *name=hyphenate
            <span>## The value of the object that the method is called on is transformed using the following methods:</span>
            *transform=`replace( ,-)`
          )

          _name = John Smith
          hyphenated_name = %name.hy

          <span>## or, more character efficient:</span>
          <span>## *m(*i=hy;*n=hyphenate;*t=`r( ,-)`);_name=John Smith;hyphenated_name=%name.hy</span>",
        'Defining a custom method.')%>
        <p>
          Note in the example above that method IDs (e.g. <code>*r</code>) or names (e.g. <code>*replace</code>) can be used when defining a custom method.
        </p>
      </div>
      <div class="sectionh4" id="syntax-version">      
        <h4 id="syntax-version-title">Syntax Version</h4>
        <p>
          The MODL syntax version number can be supplied using the key <code>*V</code> or <code>*VERSION</code> – this allows the author to inform the interpreter which version of the MODL syntax has been used to describe the MODL object. If defined, the version number must be the first interpreter instruction in the file and is only recognised in uppercase (an immutable value) and so can't be redefined.
        </p>
        <p>
          The current version is 1, revisions will be extremely rare with very careful consideration given to any breaking change.
        </p>
      </div>
    </div>
  </div>
  <div class="sectionh2" id="classes">
    <h2 id="classes-title">Classes</h2>
    <p>
      Classes can help make object description more efficient. Classes are defined with the key <code>*c</code> or <code>*class</code>. The class name is set using the key <code>*name</code> or <code>*n</code>, the class ID is set using the key <code>*id</code> or <code>*i</code>.
    </p>
    <p>
      If a key in a pair matches a class ID or class name, the pair must be transformed according to the class definition and the class name will be used as the key for the output object.
    </p>
    <p>
      The <code>*superclass</code> or <code>*s</code> key is used within a class definition to declare a superclass. Objects with a superclass inherit all pairs defined in parent classes in the class hierarchy. There's more <a href="#class-inheritance">about class inheritance</a> <%=link_icon("down")%>. The <code>*assign</code> or <code>*a</code> key is used within a class definition to assign keys to a <a href="#multi-value-pair">multi-value pair</a> <%=link_icon("up")%>. Key assignment is <a href="#key-assignment">covered here</a> <%=link_icon("down")%>.
    </p>
    <div class="sectionh3" id="class-example">
      <h3 id="class-example-title">Example</h3>
      <p>
        This basic example shows how classes can be used with multi-value pairs to make object description more efficient:
      </p>
    <%=code_with_note('code-example-class','
      *class(
        *id=e
        *name=employee
        <span>## *superclass tells the interpreter what type of object to create</span>
        *superclass=map
        <span>## *assign tells the interpreter how to assign the values of a multi-value pair</span>
        *assign=[
          [title;name;job_title]
        ]
        <span>## Any other pairs are automatically appended to every object with this class</span>
        actions=[call;email]
      )

      <span>## This simple MODL object uses the class defined above</span>
      e=Mr:John Smith:Sales Director',
      
      'An example file defining a simple class.')
    %>
    </div>
    <p>
      Here's the output object:
    </p>
    <%=code_with_note('code-example-class-output','
      employee(
        title = Mr
        name = John Smith
        job_title = Sales Director
        actions = [
          call
          email
        ]
      )',
    
    'The output from our example file.')
    %>
    <p>
      We could now use this class to describe thousands of employees using as few characters as possible.
    </p>
    <div id="class-inheritance" class="sectionh3">
    <h3 id="class-inheritance-title">Class Inheritance</h3>
      <p>
        Class inheritance can be used to make complex class definitions simpler and more efficient. For example, if we wanted to introduce a new class called <code>customer</code>, we could have <code>employee</code> and <code>customer</code> both inherit from a new <code>person</code> class:
      </p>
      <%=code_with_note('code-class-inheritance','
        *class(
          *id=p
          *name=person
          *superclass=map
          actions=[call;email]
        )
        *class(
          *id=c
          *name=customer
          *superclass=person
        )
        *class(
          *id=e
          *name=employee
          *superclass=person
        )',

      'New classes demonstrating class inheritance.',nil,true,false)
      %>
      <p>
        Each <code>customer</code> and <code>employee</code> will now inherit the <code>actions</code> array.
      </p>
      <p>
        Core superclasses are <code>str</code>, <code>num</code>, <code>arr</code> and <code>map</code>, if a superclass is not provided it will be determined by the interpreter using superclass inference.
      </p>
    </div>      
    <div class="sectionh3" id="key-assignment">
    <h3 id="key-assignment-title">Key Assignment</h3>
      <p>
        If a map always includes the same pairs in the same order, we can use a <a href="#multi-value-pair">multi-value pair</a> <%=link_icon("up")%> to describe the object more efficiently with key assignment. The <code>*assign</code> (or <code>*a</code>) key must be an array of arrays. 
      </p>
      <%=code_with_note('code-assign_key','
        *class(
          *id=e
          *name=employee
          <span class="syntax-highlighter">*assign=[</span>
            <span class="syntax-highlighter">[name]</span>
            <span class="syntax-highlighter">[title;name]</span>
            <span class="syntax-highlighter">[title;name;job_title]</span>
          <span class="syntax-highlighter">]</span>
        )',
        'The assign key in a class.',nil,true,false)
      %>
      <p>
        The array shows the different permutations of values that it will accept: 
      </p>
      <ul>
        <li>It can accept one value – it will assign the value to the key <code>name</code>.</li>
        <li>It can accept two values – it will assign the values to <code>title</code> and <code>name</code></li>
        <li>It can accept three values - it will assign the values to <code>title</code>, <code>name</code> and <code>job_title</code>.</li>
      </ul>
      <p>
        The output object is identical to that shown at the end of the previous section.
      </p>
    </div>
    <div class="sectionh3" id="class-definition-file">
    <h3 id="class-definition-file-title">Class Definition File</h3>
      <p>
        To aid in character efficiency, it's recommended to define classes in an external file that you can import. If we move our class definitions over to a separate file called <code>classes.modl</code> and store it in the same local directory we can import it and describe multiple objects:
      </p>
      <%=code_with_note('code-class-definition-file-import','
        <span class="syntax-highlighter">*IMPORT=classes.modl</span>
        <span>## An employee:</span>
        e=Mr:John Smith:Sales Director:john.smith@example.com:441270987654
        <span>## A customer:</span>
        c=Mr:Joe Bloggs:joe.bloggs@example.com:441270123456
        <span>## Another customer:</span>
        c=Mrs:Jane Wilson:jane.wilson@example.com:441270321123',
      'Importing a file.',nil,true,false)
      %>
        <p>
          Here's the output object:
        </p>
        <%=code_with_note('code-output-object-example','
        [
          employee(
            title=Mr
            name=John Smith
            job_title=Sales Director
            email=john.smith@example.com
            phone_number=+441270987654
          )
          customer(
            title=Mr
            name=Joe Bloggs
            email=joe.bloggs@example.com
            phone_number=+441270123456
          )
          customer(
            title=Mrs
            name=Jane Wilson
            email=jane.wilson@example.com
            phone_number=+441270321123
          )
        ]',

      'The MODL output object.',nil,true,false)
      %>
    </div>      
  </div>  
  <div class="sectionh2" id="encoding-for-ascii-systems">
  <h2 id="encoding-for-ascii-systems-title">Encoding For ASCII Systems</h2>
    <p>
      MODL is not limited to <a href="https://en.wikipedia.org/wiki/ASCII" target="_blank">ASCII characters</a> <%=link_icon("external")%> but some storage media are (e.g. DNS TXT records). Non-ASCII characters can be included in an ASCII MODL object by converting them to <a href="https://en.wikipedia.org/wiki/Punycode" target="_blank">Punycode</a> <%=link_icon("external")%> and enclosing them in grave accents <code>`</code>. Any Unicode character can be punycode encoded, providing ASCII support for almost every language on Earth and symbols like emojis.
    </p>
    <p>
      In the Russian language MODL object below, the <code>name</code> field uses the punycode conversion of пример (English translation: 'Example') and the <code>department</code> uses the punycode conversion of обслуживание клиентов (English: 'Customer Service'):
    </p>
    <%=code_with_note('code-punycode1','
      (name=`e1afmkfd`;department=` -7sbcecqbdsccxfizhcp6b8ah`)',
    'An example object using punycode to represent non-ASCII characters.')
    %>
    <p>
    Once it's decoded it looks like this:
    </p>
    <%=code_with_note('code-punycode2','
      (name=пример;department=обслуживание клиентов)',
    'The object once it has been decoded by the interpreter.')
    %>
    <p>
      When included in MODL objects, punycode should not include the <code>xn--</code> prefix, this is added by the interpreter.
    </p>
  </div>
  <div class="sectionh2" id="reserved-characters">
  <h2 id="reserved-characters-title">Reserved Characters</h2>
    <p>
      There are a range of reserved characters in MODL. 
    </p>
    <p>
      For character efficiency, you should use a <a href="#literals">literal</a> <%=link_icon("up")%> if a value includes two or more reserved characters, otherwise use an escape character (<code>\</code> or <code>~</code>) for a single reserved character. The following characters have special meaning in MODL:
    </p>
    <ul class="reserved">
      <li>
        <strong>Brackets</strong>: The left bracket <code>(</code> indicates the start of a <a href="#map">map</a> <%=link_icon("up")%>, the right bracket <code>)</code> indicates the end.
      </li>
      <li>
        <strong>Square Brackets</strong>: The left square bracket <code>[</code> indicates the start of an <a href="#array">array</a> <%=link_icon("up")%>, the right square bracket <code>]</code> indicates the end.
      </li>
      <li>
        <strong>Braces</strong>: The left brace <code>{</code> indicates the start of a <a href="#conditional">conditional</a> <%=link_icon("up")%>, the right brace <code>}</code> indicates the end.
      </li>
      <li>
        <strong>Semi-colon</strong> <code>;</code> is used in a <a href="#map">map</a> <%=link_icon("up")%> to separate <a href="#pair">pairs</a> <%=link_icon("up")%> and used in an <a href="#array">array</a> <%=link_icon("up")%> to separate items.
      </li>
      <li>
        <strong>Colon</strong> <code>:</code> is used to separate values in a <a href="#multi-value-pair">multi-value pair</a> <%=link_icon("up")%>.
      </li>
      <li>
        <strong>Equals</strong> <code>=</code> is used to separate the key from a value in a <a href="#pair">pair</a> <%=link_icon("up")%>.
      </li>
      <li>
        <strong>Grave accents</strong> <code>`</code> are used for <a href="#setting-and-using-variables">variable interpolation</a> <%=link_icon("up")%> and for <a href="#punycode-encoding">punycode encoded</a> <%=link_icon("up")%> values.
      </li>
      <li>
        <strong>Double quotes</strong> <code>"</code> are used for <a href="#literals">literals</a> <%=link_icon("up")%>.
      </li>
      <li>
        <strong>Backslash and tilde</strong> (<code>\</code> and <code>~</code> respectively) are escape characters and can be used before any reserved character to escape it's reserved use. To use a backlash or tilde in a MODL object, simply use two: <code>\\</code>, <code>~~</code>, <code>\~</code> or <code>~\</code>.
      </li>
      <li>
        <strong>Inside conditional statements</strong>, these characters have special significance and must be escaped: 
        <ul class="reserved">
          <li>
            <strong>Question mark</strong> <code>?</code> is used to split a <a href="#condition-test">condition test</a> <%=link_icon("up")%> from it's return value in a <a href="#conditional">conditional</a>. <%=link_icon("up")%>
          </li>
          <li>
            <strong>Slash</strong> <code>/</code> is used to split the condition return value from the next condition test in a <a href="#conditional">conditional</a>. <%=link_icon("up")%>
          </li>
          <li>
            <strong>Pipe</strong> <code>|</code> is used as an OR operator within a condition test.
          </li>
          <li>
            <strong>Ampersand</strong> <code>&amp;</code> is used as an AND operator within a condition test.
          </li>
          <li>
            <strong>Exclamation mark</strong> <code>!</code> is used as a NOT operator within a condition test.
          </li>
          <li>
            <strong>Asterisk</strong> <code>*</code> is used as a wildcard character within a condition test.
          </li>
          <li>
            <strong>Less Than</strong> <code>&lt;</code> is used within a condition test when evaluating one value against another.
          </li>
          <li>
            <strong>Greater Than</strong> <code>&gt;</code> is used within a condition test when evaluating one value against another.
          </li>
        </ul>
      </li>
    </ul>
  </div>  
  <div class="sectionh2" id="interpreter-rules">
    <h2 id="interpreter-rules-title">Interpreter Rules</h2>
    <p>
      Interpreters should follow these rules:
    </p>
    <ol class="rules">
      <li>
        Values assigned to uppercase keys are immutable, attempts to change an immutable value must raise an error at parse time. 
      </li>
      <li>
        Pairs with underscore-prefixed keys are hidden and must not appear in the interpreted object.
      </li>
      <li>
        Interpreters should use type inference for values that are not quoted, numbers can be forced as strings by quoting them.
      </li>
      <li>
        The interpreter instruction <code>*V</code> or <code>*VERSION</code> defines the MODL syntax version used. If undefined, assume version 1. If defined, it must be the first interpreter instruction in the MODL file, defining it after another interpreter instruction must raise an error at parse time.
      </li>
      <li>
        The interpreter instruction <code>*class</code> or <code>*c</code> is a class definition:
        <ol type="a" class="subrules">
          <li>
            Classes must be defined before being used.
          </li>
          <li>
            Classes must have unique ID's and names, redefining a class must raise an error at parse time.
          </li>
          <li>
            The instruction <code>*id</code> or <code>*i</code> defines the class ID.
          </li>
          <li>
            The instruction <code>*name</code> or <code>*n</code> defines the class name.
          </li>
          <li>
            The instruction <code>*superclass</code> or <code>*s</code> defines the superclass of a class using the superclass ID or name:
            <ol type="i" class="subrules">
              <li>
                A class must inherit all pairs from every parent class in the class hierarchy.
              </li>
              <li>
                The values of inherited mutable pairs can be changed.
              </li>
              <li>
                If a superclass if not defined the interpreter must use superclass inference to determine whether it is <code>str</code>, <code>num</code>, <code>arr</code> or <code>map</code>.
              </li>
            </ol>
          </li>
          <li>
            The instruction <code>*assign</code> or <code>*a</code> defines how keys are assigned to multi-value pairs with an array of arrays:
            <ol type="i" class="subrules">
              <li>
                Permutations should be in ascending order by key count. If they are not, raise an error at parse time.
              </li>
              <li>
                If a multi-value pair is used and no permutation match is found, raise an error at parse time.
              </li>
            </ol>
          </li>
        </ol>        
      </li>
      <li>
        The interpreter instruction <code>*method</code> or <code>*m</code> is a method definition:
        <ol type="a" class="subrules">
          <li>
            Methods must be defined before being called.
          </li>
          <li>
            Methods must have unique ID's and names, redefining a method must raise an error at parse time.
          </li>
          <li>
            The instruction <code>*id</code> or <code>*i</code> defines the method ID.
          </li>
          <li>
            The instruction <code>*name</code> or <code>*n</code> defines the method name.
          </li>
          <li>
            The instruction <code>*transform</code> or <code>*t</code> defines the method(s) to apply to the value of the object that the method is called on.
            <ol type="i" class="subsubrules">
              <li>
                Multiple methods must be called from left to right.
              </li>
              <li>
                Methods that take arguments must be enclosed in graves <code>`</code>.
              </li>
            </ol>
          </li>
        </ol>        
      </li>
      <li>A pair with a key that matches a class ID or class name must be transformed according to the class definition:
        <ol type="a" class="subrules">
          <li>
            In the output object, the key of the pair is set to the class name.
          </li>
          <li>
            If the value is not already a map, and one of the parent classes in the class hierarchy includes pairs, then it must be transformed to a map.
          </li>
        </ol>
      </li>
      <li>
        The instruction with key <code>*import</code> or <code>*i</code> defines the URI of the MODL file to import, multiple files can be passed in an array.
        <ol type="a" class="subrules">
          <li>
            If a file does not have a <code>.modl</code> or <code>.txt</code> extension, <code>.modl</code> must be appended to the file name before attempting to load the file.
          </li>
          <li>
            URIs can be local to, or remote from the interpreter.
          </li>
          <li>
            If any of the files cannot be found raise an error at parse time.
          </li>
          <li>
            Files should be fetched, parsed and cached for one hour by default, if the file name ends with an exclamation mark (<code>!</code>) cached files should be ignored and the new file fetched and parsed.
          </li>
        </ol>        
      </li>
      <li>An interpreter instruction with key <code>?</code> defines an object index:
        <ol type="a" class="subrules">
          <li>
            Values must be assigned using a multi-value pair or an array.
          </li>
          <li>
            Values must be assigned an index starting from zero.
          </li>
        </ol>
      </li>
      <li>Dealing with strings:
        <ol type="a" class="subrules">
          <li>Find all parts of the string that are enclosed in graves, e.g <code>`test`</code> where neither of the graves is prefixed with an escape character (<code>~</code> or <code>\</code>).</li>
          <li>If no parts are found, run “Object Referencing".</li>
          <li>If parts are found loop through them in turn:
            <ol type="i" class="subrules">
              <li>If a part begins with <code>%</code> then run "Object Referencing", else run "Punycode Decoding".</li>
            </ol>
          </li>
          <li>
            Find all non-space parts of the string that are prefixed with <code>%</code>. These are object references – run "Object Referencing".
          </li>
          <li>
            Replace the strings as per "String Replacement".
          </li>
        </ol>
      </li>
      <li>Punycode Decoding: Prefix the punycode encoded string with <code>xn--</code> (the letters xn and two dashes) and decode using a punycode / IDN library. Replace the full part (including graves) with the decoded value.</li>
      <li>Object Referencing
        <ol type="a" class="subrules">
          <li>
            If the reference includes a <code>.</code> (dot / full stop / period) then the reference key should be considered everything to the left of the <code>.</code>
          </li>
          <li>
            If the object reference is a number and the number is within the object index bounds, replace the object reference with the value from that position in the object index.
          </li>
          <li>
            If the object is a string, replace the object reference with the value of the corresponding object. If no corresponding object is found, make no substitutions. If an object is found, this value is referred to as the subject in the following section.
          </li>
          <li>
            If there was <code>.</code> in the original string, any part to the right of the first <code>.</code> (until the end of the part not including the end grave) is considered the method chain. Split the method chain by <code>.</code> and create an array from the methods. Methods must only be applied to strings, applying methods to non-strings must raise an error at parse time.
          </li>
          <li>
            Loop through the array and pass the subject to the named method, transforming the subject. Repeat the process (with the transformed subject) until all methods in the chain have been applied and the subject is fully transformed.
          </li>
          <li>
            Replace the part originally found (including graves) with the transformed subject. 
          </li>
        </ol>
      </li>
      <li>The following TXT file shows which characters must be substituted within string values: <a href="files/substitutions.txt">substitutions file</a> <%=link_icon("internal")%>.</li>
    </ol>
  </div>
</div>
<script>
var h3toc = true;
var h4toc = true;
</script>
<script src="/javascripts/toc-footer.js"></script>
<script>$( '#toc' ).html(ToC);</script>