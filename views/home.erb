<h1>Minimal&nbsp;Object Description&nbsp;Language</h1>
<p>
  MODL is a plain text data serialisation language for describing objects in as few characters as possible.
  It's designed to be character efficient when stored or in transport and developer friendly to receive and work with. In this introduction we compare MODL with other data serialisation formats and demonstrate how MODL can store an identical collection of objects using 62% fewer characters than JSON.
</p>
<div class="sectionh2" id="example-modl-object">
  <h2 id="example-modl-object-title">Example MODL Object</h2>
  <p>
    This is a basic MODL example: 
  </p>
  <%=code_with_note('example-modl-object-code','
    <span>## A map is assigned to a pair with the key \'car\'</span>
    car(
      <span>## The map is made up of pairs</span>
      make=Bentley
      model=Continental GT <span>## Comments can be added anywhere</span>
      styles[
        <span>## An array is assigned to a pair with the key \'styles\', it contains two items</span>
        fastback
        convertible
      ]
    )',

  'An example MODL object')
  %>
  <p>
   MODL can be minified using semi-colons to separate pairs and array items (where JSON has commas) with comments removed: 
  </p>
  <%=code_with_note('example-modl-object-code-min','
    car(make=Bentley;model=Continental GT;styles[fastback;convertible])',
    'An example MODL object minified')
  %>
</div>
<div class="sectionh2" id="data-serialisation-comparison">
<h2 id="data-serialisation-comparison-title">Comparison vs JSON &amp; YAML</h2>
  <p>
    Let's compare MODL with the two most popular plain text data serialisation languages: JSON and YAML.  
  </p>
  <div class="sectionh3" id="data-type-comparison">
    <h3 id="data-type-comparison-title">Data Type Comparison</h3>
    <p>
      We'll compare JSON, YAML and MODL for assigning each data type to the key <code>x</code>. 
      In all cases, we'll use the most character efficient way to assign a value. 
      We'll show a character count (including new line and space characters) and a percentage reduction for YAML and MODL compared to JSON.
    </p>
    <%=compare_formats('String',['"x": "a"','x: a','x=a'])%>
    <%=compare_formats('Number',['"x":1','x: 1','x=1'])%>
    <%=compare_formats('Array',['"x":[1,2,3]',"x:\n - 1\n - 2\n - 3",'x[1;2;3]'])%>
    <%=compare_formats('Object / Map',['"x":{"y":"z"}',"x:\n 'y': z",'x(y=z)'])%>
    <%=compare_formats('True',['"x":true','x: y','x=01'])%>
    <%=compare_formats('False',['"x":false','x: n','x=00'])%>
    <%=compare_formats('Null',['"x":null','x:','x=000'])%>
    <br>
  </div> 
  <div class="sectionh3" id="single-object-comparison">
    <h3 id="single-object-comparison-title">Single Object Comparison</h3>
    <p>
      To compare the three formats for storing a simple object, we'll use the example object from <a href="http://json.org/example" target="_blank">json.org</a> <%=link_icon("external")%>. YAML is the only format with a requirement for spacing, but for comparison each is formatted with 2 space indenting and no extra spacing.
    </p>
    <%=compare_language("objects",
      [
        '
        {
          "glossary":{
            "title":"example glossary",
            "GlossDiv":{
              "title":"S",
              "GlossList":{
                "GlossEntry":{
                  "ID":"SGML",
                  "SortAs":"SGML",
                  "GlossTerm":"Standard Generalized Markup Language",
                  "Acronym":"SGML",
                  "Abbrev":"ISO 8879:1986",
                  "GlossDef":{
                    "para":"A meta-markup language, used to create markup languages such as DocBook.",
                    "GlossSeeAlso":["GML","XML"]
                  },
                  "GlossSee":"markup"
                }
              }
            }
          }
        }',
        '
        ---
        glossary:
          title: example glossary
          GlossDiv:
            title: S
            GlossList:
              GlossEntry:
                ID: SGML
                SortAs: SGML
                GlossTerm: Standard Generalized Markup Language
                Acronym: SGML
                Abbrev: ISO 8879:1986
                GlossDef:
                  para: A meta-markup language, used to create markup languages such as DocBook.
                  GlossSeeAlso:
                  - GML
                  - XML
                GlossSee: markup',
        '
        glossary(
          title=example glossary
          GlossDiv(
            title=S
            GlossList(
              GlossEntry(
                ID=SGML
                SortAs=SGML
                GlossTerm=Standard Generalized Markup Language
                Acronym=SGML
                Abbrev=ISO 8879\:1986
                GlossDef(
                  para=A meta-markup language, used to create markup languages such as DocBook.
                  GlossSeeAlso[GML;XML]
                )
                GlossSee=markup
              )
            )
          )
        )'
      ])
    %>  
    <h4>Reduce Repeating Data</h4>
    <p>
      One way to make an object more efficient is to reduce the repetition of data. JSON has no facility to do this but YAML can repeat nodes. MODL deals with repeating data with object referencing and the object index. For illustration, we've highlighted the parts that deal with repeating data in YAML and MODL:
    </p> 
    <%=compare_language("repeating-data",
      [
        '
        {
          "glossary":{
            "title":"example glossary",
            "GlossDiv":{
              "title":"S",
              "GlossList":{
                "GlossEntry":{
                  "ID":"SGML",
                  "SortAs":"SGML",
                  "GlossTerm":"Standard Generalized Markup Language",
                  "Acronym":"SGML",
                  "Abbrev":"ISO 8879:1986",
                  "GlossDef":{
                    "para":"A meta-markup language, used to create markup languages such as DocBook.",
                    "GlossSeeAlso":["GML","XML"]
                  },
                  "GlossSee":"markup"
                }
              }
            }
          }
        }',
        '
        ---
        glossary:
          title: example glossary
          GlossDiv:
            title: S
            GlossList:
              GlossEntry:
                ID: <span>&s SGML</span>
                SortAs: <span>*s</span>
                GlossTerm: Standard Generalized Markup Language
                Acronym: <span>*s</span>
                Abbrev: ISO 8879:1986
                GlossDef:
                  para: A meta-markup language, used to create markup languages such as DocBook.
                  GlossSeeAlso:
                  - GML
                  - XML
                GlossSee: markup',
        '
        <span>?=SGML:language</span>
        glossary(
          title=example glossary
          GlossDiv(
            title=S
            GlossList(
              GlossEntry(
                ID=<span>%0</span>
                SortAs=<span>%0</span>
                GlossTerm=Standard Generalized Markup <span>%1.i</span>
                Acronym=<span>%0</span>
                Abbrev=ISO 8879\:1986
                GlossDef(
                  para=A meta-markup <span>%1</span>, used to create markup <span>%1</span>s such as DocBook.
                  GlossSeeAlso[GML;XML]
                )
                GlossSee=markup
              )
            )
          )
        )'
      ])
    %>
    <p>
      In the MODL object above you will notice percent prefixed numbers <code>%0</code> and <code>%1</code>, these represent references to the object index. The object index is defined on the first line with the key <code>?</code>. You may also notice the reference <code>%1.i</code> this instructs the interpreter to run the method <code>i</code> on the second object in the index.
    </p>
    <p>
      The character efficiency gains in this example are negligible but reducing repeating data can clearly help make larger objects more character efficient.
    </p>
    <h4>Minification</h4>
    <p>
      It's common practice to minify objects. There are two steps in minification â€“ reducing keys and removing spaces. We've replaced the original keys with 1 or 2 character alternatives and removed all spacing from the JSON and MODL examples. YAML requires spacing for structure so it can't be fully minified:
    </p>
    <%
    json_single_object = '{"g":{"t":"example glossary","d":{"t":"S","l":{"e":{"i":"SGML","s":"SGML","gt":"Standard Generalized Markup Language","a":"SGML","ab":"ISO 8879:1986","gd":{"p":"A meta-markup language, used to create markup languages such as DocBook.","sa":["GML","XML"]},"gs":"markup"}}}}}'
    yaml_single_object = '
      ---
      g:
        t: example glossary
        d:
          t: S
          l:
            e:
              i: <span>&s SGML</span>
              s: <span>*s</span>
              gt: Standard Generalized Markup Language
              a: <span>*s</span>
              ab: ISO 8879:1986
              gd:
                p: A meta-markup language, used to create markup languages such as DocBook.
                GlossSeeAlso:
                - GML
                - XML
              gs: markup'
    modl_single_object = '?=SGML:language;g(t=example glossary;d(t=S;l(e(i=%0;s=%0;gt=Standard Generalized Markup %1.i;a=%0;ab=ISO 8879\:1986;gd(p=A meta-markup %1, used to create markup %1s such as DocBook.;sa=[GML;XML]);gs=markup))))'
    %>
    <%=compare_language("objects-minified",
      [ json_single_object, yaml_single_object, modl_single_object ],70)%> 
    <p>
      We've had to make significant sacrifices in readability to achieve these character savings. This makes our object less intuitive for developers to work with. MODL interpreters can automatically unpack this data, returning it to it's original developer friendly state using classes, which we'll come to in a moment. 
    </p>
    <p>
      As a data serialisation format for storing a single object, we've demonstrated that MODL is more character efficient than JSON and YAML â€“ in this example we've seen a 23% reduction when compared to JSON and over 50% reduction compared to YAML.
    </p>
    <%=compare_formats('Storing a Single Object',[json_single_object,yaml_single_object,modl_single_object])%>
    <br>
  </div>
  <div class="sectionh3" id="mutliple-object-comparison">
    <h3>Multiple Object Comparison</h3>
    <p>
      MODL offers even more efficiency when describing multiple objects of the same type. Using our previous example as inspiration, we'll describe the three languages that we've been comparing:Â JSON, YAML and MODL. First of all, we'll compare them without using MODL's class functionality:
    </p>
    <!-- in the following objects, the JSON launch date is given as 2001 â€“Â the date that Crockford received the first JSON message. ( source: https://youtu.be/-C-JoyNuQJs?t=2m3s )
    -->
    <%
    json_df = '
    [ {
      "language" : {
        "name" : "JSON",
        "full_name" : "JavaScript Object Notation",
        "launch_year" : 2001,
        "requires_spacing" : false,
        "spec_url" : "https://www.json.org",
        "structures" : [ "object", "array" ],
        "primitives" : [ "string", "number", "boolean", "null" ]
      }
      }, {
      "language" : {
        "name" : "YAML",
        "full_name" : "YAML Ain\'t Markup Language",
        "launch_year" : 2001,
        "requires_spacing" : true,
        "spec_url" : "https://www.yaml.org",
        "structures" : [ "mappings", "sequences" ],
        "primitives" : [ "string", "number", "date", "boolean", "null" ]
      }
      }, {
      "language" : {
        "name" : "MODL",
        "full_name" : "Minimal Object Description Language",
        "launch_year" : 2018,
        "requires_spacing" : false,
        "spec_url" : "https://www.modl.uk",
        "structures" : [ "pair", map", "array", "conditional" ],
        "primitives" : [ "string", "number", "boolean", "null" ]
      }
    } ]'
    yaml_df = "
      ---
      - language:
          name: JSON
          full_name: JavaScript Object Notation
          launch_year: 2001
          requires_spacing: false
          spec_url: https://www.json.org
          structures:
          - object
          - array
          primitives:
          - string
          - number
          - boolean
          - 'null'
      - language:
          name: YAML
          full_name: YAML Ain't Markup Language
          launch_year: 2001
          requires_spacing: true
          spec_url: https://www.yaml.org
          structures:
          - mappings
          - sequences
          primitives:
          - string
          - number
          - date
          - boolean
          - 'null'
      - language:
          name: MODL
          full_name: Minimal Object Description Language
          launch_year: 2018
          requires_spacing: false
          spec_url: https://www.modl.uk
          structures:
          - pair
          - map
          - array
          - conditional
          primitives:
          - string
          - number
          - boolean
          - 'null'"
    modl_df = '
      [
        language(
          name=JSON
          full_name=JavaScript Object Notation
          launch_year=2001
          requires_spacing=false
          spec_url="https://www.json.org"
          structures=[object;array]
          primitives=[string;number;boolean;"null"]
        )
        language(
          name=YAML
          full_name=YAML Ain\'t Markup Language
          launch_year=2001
          requires_spacing=true
          spec_url="https://www.yaml.org"
          structures=[mappings;sequences]
          primitives=[string;number;date;boolean;"null"]
        )
        language(
          name=MODL
          full_name=Minimal Object Description Language
          launch_year=2018
          requires_spacing=false
          spec_url="https://www.modl.uk"
          structures=[pair;map;array;conditional]
          primitives=[string;number;boolean;"null"]
        )
      ]'
    %>
    <%=compare_language("multiple-objects",
      [
        json_df,
        yaml_df,
        modl_df
      ],610)
    %>  
    <h4>Classes</h4>
    <p>
      MODL classes allow us to define an object type, which an interpreter will use for all instances of it. Here's a class for our <code>language</code> object:
    </p>
    <%=code_with_note('example-modl-file-code','
    *class(
      *id=l
      *name=language
      *superclass=map
      *assign=[
        [name;full_name;launch_year;requires_spacing;spec_url;structures;primitives]
      ]
    )
    ',

  'A MODL class')
  %>
    <p>
      In MODL, asterisk prefixed keys provide instructions to the interpreter and never appear in the output object. In the class above, we're instructing the interpreter to create a new <code>class</code> with the <code>id=l</code> and <code>name=language</code>. We're telling it that this class is a child of the <code>map</code> class. We're also telling it how to <code>assign</code> values that are passed to it by multi-value pairs. Now we can describe our languages like this:
    </p>
    <%=code_with_note('using-classes','
    *class(
      *id=l
      *name=language
      *superclass=map
      *assign=[
        [name;full_name;launch_year;requires_spacing;spec_url;structures;primitives]
      ]
    )
    [
      l=JSON:JavaScript Object Notation:2001:false:"https://www.json.org":[object;array]:[string;number;boolean;"null"]
      l=YAML:YAML Ain\'t Markup Language:2001:true:"https://www.yaml.org":[mappings;sequences]:[string;number;date;boolean;"null"]
      l=MODL:Minimal Object Description Language:2018:false:"https://www.modl.uk":[pair;map;array;conditional]:[string;number;boolean;"null"]
    ]
    ',

    'Describing our objects using MODL classes')
    %>
    <h5>Minifying Classes</h5>
    <p>
      Classes can be minified too. Interpreters recognise <code>*c</code> as well <code>*class</code>, <code>*i</code> as well as <code>*id</code>, <code>*n</code> as well as <code>*name</code>, <code>*s</code> as well as <code>*superclass</code> and <code>*a</code> as well as <code>*assign</code>. Here is our class minified:
    </p>
    <%=code_with_note('minified-class','
    *c(*i=l;*n=language;*s=map;*a=[[name;full_name;launch_year;requires_spacing;spec_url;structures;primitives]])
    ',
    'A MODL class minified')
    %>    
    <h5>Importing a Class File</h5>
    <p>
      We've seen how to instruct the interpreter to create a class, we can also instruct the interpreter to import another MODL file using the key <code>*IMPORT</code> or <code>*I</code>. MODL imports can be used for any MODL file. In this example, we're defining our classes in a separate file so we can easily re-use them. We'll call our file <code>c.modl</code>, we can import it simply using <code>*I=c</code> since the interpreter automatically uses the .modl extension if one hasn't been provided.
    </p>
    <p>
      Let's compare the JSON and YAML minified objects with MODL using an imported class and object referencing to reduce repetition of data: 
    </p>
    <%
    json_multiple_objects = '[{"l":{"n":"JSON","f":"JavaScript Object Notation","l":2001,"r":false,"su":"https://www.json.org","s":["object","array"],"p":["string","number","boolean","null"]}},{"l":{"n":"YAML","f":"YAML Ain\'t Markup Language","l":2001,"r":true,"su":"https://www.yaml.org","s":["mappings","sequences"],"p":["string","number","date","boolean","null" ]}},{"l":{"n":"MODL","f":"Minimal Object Description Language","l":2018,"r":false,"su":"https://www.modl.uk","s":["pair","map","array","conditional"],"p" :["string","number","boolean","null"]}}]'
    yaml_multiple_objects = "
      ---
      - l:
          n: JSON
          f: JavaScript Object Notation
          l: 2001
          r: false
          su: https://www.json.org
          s:
          - object
          - array
          p:
          - string
          - number
          - boolean
          - 'null'
      - language:
          n: YAML
          f: YAML Ain't Markup Language
          l: 2001
          r: true
          su: https://www.yaml.org
          s:
          - mappings
          - sequences
          p:
          - string
          - number
          - date
          - boolean
          - 'null'
      - language:
          n: MODL
          f: Minimal Object Description Language
          l: 2018
          r: false
          su: https://www.modl.uk
          s:
          - map
          - array
          p:
          - string
          - number
          - boolean
          - 'null'"
    modl_multiple_objects = '*I=c;?=object:array:string:number:boolean:language;[l=JSON:JavaScript %0.i Notation:2001:false:"https://www.json.org":[%0;%1]:[%2;%3;%4;"null"];l=YAML:YAML Ain\'t Markup %5.i:2001:true:"http://www.yaml.org":[mappings;sequences]:[%2;%3;date;%4;"null"];l=MODL:Minimal %0.i Description %5.i:2018:false:"http://www.modl.uk":[[pair;map;%1;conditional]:[%2;%3;%4;"null"]]'
    %>
    <%=compare_language("multiple-objects-minified",
      [json_multiple_objects,yaml_multiple_objects,modl_multiple_objects],70)
    %>
    <%=compare_formats("Storing Multiple Objects",
      [json_multiple_objects,yaml_multiple_objects,modl_multiple_objects])
    %><br>
  </div>
  <div class="sectionh3" id="minified-and-developer-friendly">
    <h3 id="minified-and-developer-friendly-title">Minified and Developer Friendly</h3>
    <p>
      In the section above, we looked at how classes can make objects more efficient, they also make output developer friendly. MODL interpreters can output unpacked MODL (pretty printed with original keys) but can also output JSON. To round up, let's look at an input object and an output object.
    </p>
    <div class="sectionh4" id="modl-input">
      <h4 id="modl-input-title">MODL Input</h4>
      <p>
        As we saw above, the MODL input to describe our three languages is 364 characters with an imported MODL class file. It's 468 characters to include the class definition in the file itself. Here it is using the import:
      </p>
      <%=code_with_note("modl-multiple-objects",modl_multiple_objects,"MODL Input (364 characters)")%>
      <h4 id="json-output-title">MODL / JSON Output</h4>
      <p>
        After being processed by the MODL interpreter, the output object is unpacked and developer friendly.
      </p>
      <%=compare_language("multiple-objects-output",
        [
          json_df,
          nil,
          '
          [
            language(
              name=JSON
              full_name=JavaScript Object Notation
              launch_year=2001
              requires_spacing=false
              spec_url="https://www.json.org"
              structures=[object;array]
              primitives=[string;number;boolean;"null"]
            )
            language(
              name=YAML
              full_name=YAML Ain\'t Markup Language
              launch_year=2001
              requires_spacing=true
              spec_url="https://www.yaml.org"
              structures=[mappings;sequences]
              primitives=[string;number;date;boolean;"null"]
            )
            language(
              name=MODL
              full_name=Minimal Object Description Language
              launch_year=2018
              requires_spacing=false
              spec_url="https://www.modl.uk"
              structures=[pair;map;array;conditional]
              primitives=[string;number;boolean;"null"]
            )
          ]'
        ],640)
      %>  
      <%=compare_formats("Developer Friendly Objects",
        [json_df,yaml_df,modl_multiple_objects])
      %>  
      <br>
    </div>
  </div>
</div>
<div class="sectionh2" id="added-functionality">
  <h2 id="added-functionality-title">Added Functionality</h2>
  <p>
    MODL offers extra functionality that typical data serialisation formats don't, including the ability to describe an object conditionally. For detailed information about how MODL works, read the <em>Technical Specification</em>. To get started on your own project take a look at the <em>Developer Libraries</em>.
  </p>
  <div class="row" id="button-row">
    <div class="col-6 col-s-6">
      <a href="specification">
        <div class="button first">
          View Technical Specification
        </div>
      </a>      
    </div>
    <div class="col-6 col-s-6">
      <a href="libraries">
        <div class="button first">      
          View Developer Libraries
        </div>
      </a>
    </div>  
  </div>
</div>
